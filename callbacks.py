from aiogram.types import CallbackQuery, FSInputFile
from dbtools import get_user_field, update_user_field
from config import bot, router, START_MESSAGE, LINK
from aiogram import F
from menu import get_new_menu_lvl, get_menu_text, get_menu_keyboard,button_hendler
from dbtools import get_tales_field, get_user_field, get_parts_tale
from keyboards import tale_end_keyboard
from prompts import get_stub_message
from logger import log_event, get_db_state

@router.callback_query(F.data == "continue tale")
async def continue_tale_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    cur_tale = await get_user_field(user_id, "cur_tale")
    size = await get_tales_field(cur_tale, "tale_size")
    cur_stage = await get_tales_field(cur_tale, "cur_stage")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    await log_event(user_id, callback.data, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–∫–∞–∑–∫–∏", await get_db_state(user_id))

    try:
        parts = await get_parts_tale(cur_tale , size)
    except: pass
    if cur_tale == 0 or parts is None:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—á–∞—Ç–æ–π —Å–∫–∞–∑–∫–∏!")
        await log_event(user_id, callback.data, "–ù–µ—Ç –Ω–∞—á–∞—Ç–æ–π —Å–∫–∞–∑–∫–∏", await get_db_state(user_id))
        return
    
    try:
        await callback.message.delete()
    except:
        print("–£–¥–∞–ª–µ–Ω–∏–µ –≤ callback –Ω–µ —É–¥–∞–ª–æ—Å—å")

    await callback.message.answer( "\u00A0" * 19 + "üéâ *–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ* üéâ" + "\u00A0" * 14, parse_mode="Markdown")
    for part in parts[:-1]:
        await callback.message.answer(part, parse_mode="Markdown")
    await update_user_field(user_id, 'menu', "tale_menu")
    
    if cur_stage == size:
        await callback.message.answer(parts[-1], parse_mode="Markdown", reply_markup=tale_end_keyboard)
    else:
        await callback.message.answer(parts[-1], parse_mode="Markdown", reply_markup=await get_menu_keyboard("tale_menu"))

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
    await log_event(user_id, callback.data, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —Å–∫–∞–∑–∫–∏", await get_db_state(user_id))

@router.callback_query()
async def process_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    button_text = callback.data
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await log_event(user_id, button_text, "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞", await get_db_state(user_id))

    if button_text not in ["Idkt", "back main"]:
        try:
            await callback.message.delete()
        except:
            print("–£–¥–∞–ª–µ–Ω–∏–µ –≤ callback –Ω–µ —É–¥–∞–ª–æ—Å—å")

    if button_text == "Idkt" or button_text == "create":
        ans = await callback.message.answer(f"{await get_stub_message()}\n\n*–ü–æ–¥—Å–∫–∞–∑–∫–∞*:\n–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—á–∞—Ç—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ ‚Äî —Ç–∞–∫ —Å–∫–∞–∑–∫–∞ —Å—Ç–∞–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ! ‚ú® ", parse_mode="Markdown")
    
    button_hendler_text = await button_hendler(user_id, button_text)
    
    cur_stage = await get_tales_field(await get_user_field(user_id, "cur_tale") or 0, "cur_stage") or 0
    print(cur_stage)
    tale_size = await get_tales_field(await get_user_field(user_id, "cur_tale") or 0, "tale_size") or 0
    print(tale_size)
    menu_lvl = await get_new_menu_lvl(button_text, cur_stage, tale_size)
    print(menu_lvl)
    print(f"menu_lvl : {menu_lvl}")
    await update_user_field(user_id, 'menu', menu_lvl)

    if button_text == "Idkt" or button_text == "create":
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=ans.message_id)
        except:
            print("–£–¥–∞–ª–µ–Ω–∏–µ –≤ callback –Ω–µ —É–¥–∞–ª–æ—Å—å")

    try:
        if await get_menu_text(lvl=menu_lvl, user_id=user_id) == START_MESSAGE:
            ans = await callback.message.answer_photo(
                FSInputFile("source/Start_image.jpg"),
                caption=button_hendler_text + await get_menu_text(lvl=menu_lvl, user_id=user_id),
                parse_mode="Markdown",
                reply_markup=await get_menu_keyboard(menu_lvl)
            )
        else:
            ans = await callback.message.answer(
                button_hendler_text + await get_menu_text(lvl=menu_lvl, user_id=user_id),
                parse_mode="Markdown",
                reply_markup=await get_menu_keyboard(menu_lvl)
            )
        await update_user_field(user_id, 'last_message', ans.message_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        await log_event(user_id, button_text, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", await get_db_state(user_id))

    except:
        print("Except in callback")

    # –£–¥–∞–ª–∏—Ç—å –≤ release –≤–µ—Ä—Å–∏–∏
    if button_text == "Idkt" and cur_stage == tale_size:
        ans = await callback.message.answer(f"\n–ö–æ–Ω–µ—Ü!\n–Ø –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —Ç—ã –ø–æ–±—ã–≤–∞–ª –≤ –º–æ–µ–π —Å–∫–∞–∑–∫–µ!\n\n–°–µ–π—á–∞—Å —è —É—á—É—Å—å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ, –∏ —Ç–≤–æ—è –ø–æ–º–æ—â—å –º–Ω–µ –æ—á–µ–Ω—å –Ω—É–∂–Ω–∞! –ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å —ç—Ç–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî —Å–∫–∞–∂–∏ –º–Ω–µ!\n\n–ó–∞–ø–æ–ª–Ω–∏ —ç—Ç—É [—Ñ–æ—Ä–º—É]({LINK}) –∏ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ —è —Å—Ç–∞–Ω—É –ª—É—á—à–µ‚ú®\n\n_–†–µ–∫–æ–º–µ–Ω–¥—É—é –≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ—ë —á–µ—Ä–µ–∑ 2-3 –∏—Å—Ç–æ—Ä–∏–∏_\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—à—å –º–Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∞–º—ã–µ –ª—É—á—à–∏–µ —Å–∫–∞–∑–∫–∏ –Ω–∞ —Å–≤–µ—Ç–µ! üíô", parse_mode="Markdown", reply_markup=tale_end_keyboard)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞–∑–∫–∏
        await log_event(user_id, button_text, "–°–∫–∞–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", await get_db_state(user_id))
        return