from dbtools import get_user_field, get_new_tales_num, add_tale_if_not, get_tales_field, update_tales_field, add_data_to_tale, get_user_context_tale, print_table, update_user_field
from config import TEMPERATURE, client, bot, START_MESSAGE
from prompts import get_prompt
from keyboards import main_menu_keyboard, settings_menu_sex_keyboard, settings_menu_keyboard,\
size_keyboard,  hero_keyboard, genre_keyboard, moral_keyboard, tale_keyboard, tale_end_keyboard, settings_back_keyboard, tale_settings_menu_keyboard


async def get_new_menu_lvl(button: str, cur_stage = -1, tale_size = 0):
    if(button in ["start","back main","back main from settings"]):
        return "main_menu"
    if(button in ["sex"]):
        return "settings_menu_sex"
    if(button in ["man"]):
        return "settings_menu_sex_man"
    if(button in ["woman"]):
        return "settings_menu_sex_woman"
    if(button in ["name"]):
        return "settings_menu_name"
    if(button in ["age"]):
        return "settings_menu_age"
    if(button in ["hobby"]):
        return "settings_menu_hobby"
    if(button in ["settings", "back settings"]):
        return "settings_menu"
    if(button in ["new tale", "tiny tale", "small tale", "medium tale", "large tale", "Idkm", "I", "random hero", "random genre", "random moral"]):
        return "tale_settings"
    if(button in ["create", "Idkt", "continue_tale", "continue tale"]):
        if(cur_stage == tale_size):
            return "tale_end_menu"
        return "tale_menu"
    if(button in ["size"]):
        return "size_menu"
    if(button in ["hero"]):
        return "hero_menu"
    if(button in ["genre"]):
        return "genre_menu"
    if(button in ["moral"]):
        return "moral_menu"
    

async def get_menu_text(lvl: str, user_id: int):
    if(lvl == "main_menu"):
        return START_MESSAGE
    
    if(lvl in ["settings_menu", "settings_menu_sex_woman", "settings_menu_sex_man"]):
        if(lvl == "settings_menu_sex_woman"):
            await update_user_field(user_id, 'sex', "–ñ–µ–Ω—Å–∫–∏–π")
        if(lvl == "settings_menu_sex_man"):
            await update_user_field(user_id, 'sex', "–ú—É–∂—Å–∫–æ–π")
        name = await get_user_field(user_id, "name") or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        sex = await get_user_field(user_id, "sex") or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        age = await get_user_field(user_id, "age") or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        hobby = await get_user_field(user_id, "hobby") or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        return f"*–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:*\n\nüè∑Ô∏è *–ò–º—è:* {name}\nüöª *–ü–æ–ª:* {sex}\nüë∂üèª *–í–æ–∑—Ä–∞—Å—Ç:* {age}\nüéÆ *–£–≤–ª–µ—á–µ–Ω–∏—è:* {hobby}\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ‚úèÔ∏è"
    
    if(lvl in ["tale_settings"]):
        tale_num = await get_user_field(user_id, "cur_tale")
        print(tale_num)
        size = await get_tales_field(tale_num, "tale_size")
        hero = await get_tales_field(tale_num, "hero") or  "–°–ª—É—á–∞–π–Ω—ã–π"
        genre = await get_tales_field(tale_num, "genre") or  "–°–ª—É—á–∞–π–Ω—ã–π"
        moral = await get_tales_field(tale_num, "moral") or  "–°–ª—É—á–∞–π–Ω–∞—è"
        match size:
            case 3:
                size = "5 –º–∏–Ω—É—Ç—ã"
            case 8:
                size = "10 –º–∏–Ω—É—Ç"
            case 16:
                size = "20 –º–∏–Ω—É—Ç"
            case 32:
                size = "40 –º–∏–Ω—É—Ç"
        return f"*–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Å–∫–∞–∑–∫—É –ø–æ–¥ —Ç–µ–±—è!*üöÄ\n\n‚è≥ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {size}\nü¶∏üèª‚Äç‚ôÇÔ∏è *–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π:* {hero}\nüé≠ *–ñ–∞–Ω—Ä:* {genre}\n‚öñÔ∏è *–ú–æ—Ä–∞–ª—å:* {moral}\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏ —Å–æ–∑–¥–∞—Ç—å‚ú®"


    if(lvl == "settings_menu_sex"):
        return "üöª –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:"
    if(lvl == "settings_menu_name"):
        return "üè∑Ô∏è –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    if(lvl == "settings_menu_age"):
        return "üë∂üèª –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"
    if(lvl == "settings_menu_hobby"):
        return "üéÆ –ö–∞–∫–∏–µ —É —Ç–µ–±—è —É–≤–ª–µ—á–µ–Ω–∏—è?"
    
    if(lvl == "size_menu"):
        return "‚è≥–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∏–¥—Ç–∏ —Å–∫–∞–∑–∫–∞?"
    if(lvl == "hero_menu"):
        return "ü¶∏üèª‚Äç‚ôÇÔ∏è –ö—Ç–æ –±—É–¥–µ—Ç –≥–ª–∞–≤–Ω—ã–º –≥–µ—Ä–æ–µ–º –≤ —Å–∫–∞–∑–∫–µ?\n\n–ú–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã - —Ç–∞–∫ —Å–∫–∞–∑–∫–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –µ—â—ë —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ!"
    if(lvl == "genre_menu"):
        return "üé≠ –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –∏–ª–∏ –∂–∞–Ω—Ä –±—É–¥–µ—Ç —É —Å–∫–∞–∑–∫–∏?\n\n–ú–æ–∂–µ—Ç –æ–Ω–∞ –æ –ø—Ä–∏—Ä–æ–¥–µ –∏–ª–∏ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –∞ –º–æ–∂–µ—Ç —ç—Ç–æ –≤–æ–æ–±—â–µ –±—É–¥–µ—Ç –±–∞—Å–Ω—è. –¢–æ–ª—å–∫–æ —Å–∫–∞–∂–∏, –∞ —è –ø–æ–¥—Ö–≤–∞—á—É!"
    if(lvl == "moral_menu"):
        return "‚öñÔ∏è –ö–∞–∫–∞—è –≤ —Å–∫–∞–∑–∫–µ –º–æ—Ä–∞–ª—å?\n\n–ú–æ–∂–µ—Ç –æ–Ω–∞ –ø–æ–∫–∞–∂–µ—Ç, —á—Ç–æ —É–ø–æ—Ä—Å—Ç–≤–æ –∏ —Ç—Ä—É–¥ –≤–µ–¥—É—Ç –∫ —É—Å–ø–µ—Ö—É –∏–ª–∏ –∫—Ä–µ–ø–∫–∞—è –¥—Ä—É–∂–±–∞ —Å–ø–æ—Å–æ–±–Ω–∞ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –≤—Å–µ –Ω–µ–≤–∑–≥–æ–¥—ã!"
    
    return ""

async def get_menu_keyboard(lvl: str):
    match lvl:
        case "main_menu":
            return main_menu_keyboard
        case "settings_menu":
            return settings_menu_keyboard
        case "settings_menu_sex":
            return settings_menu_sex_keyboard
        case "settings_menu_sex_man":
            return settings_menu_keyboard
        case "settings_menu_sex_woman":
            return settings_menu_keyboard
        case "settings_menu_age":
            return settings_back_keyboard
        case "settings_menu_name":
            return settings_back_keyboard
        case "settings_menu_hobby":
            return settings_back_keyboard
        case "tale_settings":
            return tale_settings_menu_keyboard
        case "size_menu":
            return size_keyboard
        case "hero_menu":
            return hero_keyboard
        case "genre_menu":
            return genre_keyboard
        case "moral_menu":
            return moral_keyboard
        case "tale_menu":
            return tale_keyboard
        case "tale_end_menu":
            return tale_end_keyboard
        

async def button_hendler(user_id: int, button: str):
    if(button == "new tale"):
        await update_user_field(user_id, "cur_tale", await get_new_tales_num(user_id))
    if(button == "tiny tale"):
        await update_tales_field(await get_user_field(user_id, "cur_tale"), "tale_size", 3)
    if(button == "small tale"):
        await update_tales_field(await get_user_field(user_id, "cur_tale"), "tale_size", 8)
    if(button == "medium tale"):
        await update_tales_field(await get_user_field(user_id, "cur_tale"), "tale_size", 16)
    if(button == "large tale"):
        await update_tales_field(await get_user_field(user_id, "cur_tale"), "tale_size", 32)
    if(button == "I"):
        await update_tales_field(await get_user_field(user_id, "cur_tale"), "hero", "–Ø")
    if(button == "random hero"):
        await update_tales_field(await get_user_field(user_id, "cur_tale"), "hero", "–°–ª—É—á–∞–π–Ω—ã–π")
    if(button == "random genre"):
        await update_tales_field(await get_user_field(user_id, "cur_tale"), "genre", "–°–ª—É—á–∞–π–Ω—ã–π")
    if(button == "random moral"):
        await update_tales_field(await get_user_field(user_id, "cur_tale"), "moral", "–°–ª—É—á–∞–π–Ω–∞—è")

    if(button == "Idkt" or button == "create"):
        await update_user_field(user_id, 'process', "yes")
        tale_num = await get_user_field(user_id, "cur_tale")
        size = await get_tales_field(tale_num, "tale_size")
        if(await get_tales_field(tale_num, "cur_stage") == None):
            await update_tales_field(tale_num, 'cur_stage', 0)
        await add_tale_if_not(tale_num, size)
        stage = await get_tales_field(tale_num, 'cur_stage')

        if(stage >= size):
            await update_user_field(user_id, 'process', "no")
            return "–¢–≤–æ—è —Å–∫–∞–∑–∫–∞ –ø–æ–¥–æ—à–ª–∞ –∫ –∫–æ–Ω—Ü—É!\n–¢—ã –º–æ–∂–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å —ç—Ç—É —Å–∫–∞–∑–∫—É –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é!"
        
        stage = stage + 1
        await update_tales_field(tale_num, 'cur_stage', stage)

        prompt = await get_prompt("–ü—Ä–∏–¥—É–º–∞–π —Å–∞–º, —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ.",user_id, tale_num);
        await add_data_to_tale(tale_num, prompt, size)
        response = await client.chat.completions.create(
            model="deepseek-chat",
            messages=await get_user_context_tale(tale_num, size),
            stream=False,
            temperature=TEMPERATURE,
            parallel_tool_calls=True
        )
        bot_response = response.choices[0].message.content
        await add_data_to_tale(tale_num, bot_response, size)
        await print_table("tales")
        await print_table("small_tale")
        await update_user_field(user_id, 'process', "no")
        if(button == "create"):
            return "\u00A0" * 22 + "üéâ *–ù–æ–≤–∞—è —Å–∫–∞–∑–∫–∞* üéâ\n"  + bot_response
        else:
            return bot_response

    return ""
